/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ulb.lisa.infoh400.labs2020.view;

import java.awt.Color;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.File;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import ulb.lisa.infoh400.labs2020.GlobalConfig;
import ulb.lisa.infoh400.labs2020.controller.AppointmentJpaController;
import ulb.lisa.infoh400.labs2020.controller.DICOMServices;
import ulb.lisa.infoh400.labs2020.controller.DoctorJpaController;
import ulb.lisa.infoh400.labs2020.controller.ImageJpaController;
import ulb.lisa.infoh400.labs2020.controller.PatientJpaController;
import ulb.lisa.infoh400.labs2020.controller.exceptions.IllegalOrphanException;
import ulb.lisa.infoh400.labs2020.controller.exceptions.NonexistentEntityException;
import ulb.lisa.infoh400.labs2020.model.Appointment;
import ulb.lisa.infoh400.labs2020.model.Doctor;
import ulb.lisa.infoh400.labs2020.model.Image;
import ulb.lisa.infoh400.labs2020.model.Patient;

/**
 *
 * @author Adrien Foucart
 */
public class MainWindow extends javax.swing.JFrame {
    
    private final EntityManagerFactory emfac = Persistence.createEntityManagerFactory("infoh400_PU");
    private final PatientJpaController patientCtrl = new PatientJpaController(emfac);
    private final DoctorJpaController doctorCtrl = new DoctorJpaController(emfac);
    private final AppointmentJpaController appointmentCtrl = new AppointmentJpaController(emfac);
    private final ImageJpaController imageCtrl = new ImageJpaController(emfac);
    
    private enum ItemType {PATIENT, DOCTOR, APPOINTMENT, IMAGE};
    private ItemType itemType = null;
    
    private DICOMServices dicomServices = new DICOMServices();
    
    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        doctorTextLabel1 = new javax.swing.JLabel();
        doctorImageLabel1 = new javax.swing.JLabel();
        titleLabel = new javax.swing.JLabel();
        patientImageLabel = new javax.swing.JLabel();
        patientTextLabel = new javax.swing.JLabel();
        doctorTextLabel = new javax.swing.JLabel();
        doctorImageLabel = new javax.swing.JLabel();
        AppointmentImageLabel = new javax.swing.JLabel();
        appointmentTextLabel = new javax.swing.JLabel();
        ImageImageLabel = new javax.swing.JLabel();
        ImageTextLabel = new javax.swing.JLabel();
        listPatientsButton = new javax.swing.JButton();
        listDoctorsButton = new javax.swing.JButton();
        listAppointmentsButton = new javax.swing.JButton();
        listImagesButton = new javax.swing.JButton();
        addPatientButton = new javax.swing.JButton();
        addDoctorButton = new javax.swing.JButton();
        addAppointmentButton = new javax.swing.JButton();
        addImageButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        itemsList = new javax.swing.JList<>();
        editPatientButton = new javax.swing.JButton();
        editDoctorButton = new javax.swing.JButton();
        editAppointmentButton = new javax.swing.JButton();
        deletePatientButton = new javax.swing.JButton();
        deleteAppointmentButton = new javax.swing.JButton();
        deleteDoctorButton = new javax.swing.JButton();
        dicomServerButton = new javax.swing.JButton();

        doctorTextLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        doctorTextLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        doctorTextLabel1.setText("Doctors");

        doctorImageLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/noun_Doctor_575955.png"))); // NOI18N

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        setForeground(java.awt.Color.white);

        titleLabel.setBackground(new java.awt.Color(0, 0, 153));
        titleLabel.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        titleLabel.setForeground(new java.awt.Color(255, 255, 255));
        titleLabel.setText("    Health Information System");
        titleLabel.setOpaque(true);

        patientImageLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/noun_Patient_287071.png"))); // NOI18N

        patientTextLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        patientTextLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        patientTextLabel.setText("Patients");

        doctorTextLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        doctorTextLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        doctorTextLabel.setText("Doctors");

        doctorImageLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/noun_Doctor_575955.png"))); // NOI18N

        AppointmentImageLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/noun_appointment_1701843.png"))); // NOI18N

        appointmentTextLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        appointmentTextLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        appointmentTextLabel.setText("Appointments");

        ImageImageLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/noun_X-Ray_968744.png"))); // NOI18N

        ImageTextLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        ImageTextLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        ImageTextLabel.setText("Images");

        listPatientsButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/noun_List_103471.png"))); // NOI18N
        listPatientsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listPatientsButtonActionPerformed(evt);
            }
        });

        listDoctorsButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/noun_List_103471.png"))); // NOI18N
        listDoctorsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listDoctorsButtonActionPerformed(evt);
            }
        });

        listAppointmentsButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/noun_List_103471.png"))); // NOI18N
        listAppointmentsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listAppointmentsButtonActionPerformed(evt);
            }
        });

        listImagesButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/noun_List_103471.png"))); // NOI18N
        listImagesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listImagesButtonActionPerformed(evt);
            }
        });

        addPatientButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/noun_add_3029252.png"))); // NOI18N
        addPatientButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addPatientButtonActionPerformed(evt);
            }
        });

        addDoctorButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/noun_add_3029252.png"))); // NOI18N
        addDoctorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addDoctorButtonActionPerformed(evt);
            }
        });

        addAppointmentButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/noun_add_3029252.png"))); // NOI18N
        addAppointmentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addAppointmentButtonActionPerformed(evt);
            }
        });

        addImageButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/noun_add_3029252.png"))); // NOI18N
        addImageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addImageButtonActionPerformed(evt);
            }
        });

        itemsList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                itemsListMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(itemsList);

        editPatientButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/noun_edit_3029255.png"))); // NOI18N
        editPatientButton.setEnabled(false);
        editPatientButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editPatientButtonActionPerformed(evt);
            }
        });

        editDoctorButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/noun_edit_3029255.png"))); // NOI18N
        editDoctorButton.setEnabled(false);
        editDoctorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editDoctorButtonActionPerformed(evt);
            }
        });

        editAppointmentButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/noun_edit_3029255.png"))); // NOI18N
        editAppointmentButton.setEnabled(false);
        editAppointmentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editAppointmentButtonActionPerformed(evt);
            }
        });

        deletePatientButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/noun_Delete_756859.png"))); // NOI18N
        deletePatientButton.setEnabled(false);
        deletePatientButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deletePatientButtonActionPerformed(evt);
            }
        });

        deleteAppointmentButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/noun_Delete_756859.png"))); // NOI18N
        deleteAppointmentButton.setEnabled(false);
        deleteAppointmentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteAppointmentButtonActionPerformed(evt);
            }
        });

        deleteDoctorButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/noun_Delete_756859.png"))); // NOI18N
        deleteDoctorButton.setEnabled(false);
        deleteDoctorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteDoctorButtonActionPerformed(evt);
            }
        });

        dicomServerButton.setBackground(new java.awt.Color(255, 0, 0));
        dicomServerButton.setText("Server (Stopped)");
        dicomServerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dicomServerButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(titleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 912, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(150, 150, 150)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(patientImageLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(patientTextLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(60, 60, 60)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(doctorImageLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(doctorTextLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(editPatientButton, javax.swing.GroupLayout.PREFERRED_SIZE, 51, Short.MAX_VALUE)
                                    .addComponent(listPatientsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(addPatientButton, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(deletePatientButton, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                                .addGap(52, 52, 52)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(listDoctorsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(editDoctorButton, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(addDoctorButton, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(deleteDoctorButton, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))))
                        .addGap(52, 52, 52)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(listAppointmentsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(editAppointmentButton, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(addAppointmentButton, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(deleteAppointmentButton, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(52, 52, 52)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(listImagesButton, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(addImageButton, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(dicomServerButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(AppointmentImageLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(appointmentTextLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(60, 60, 60)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(ImageImageLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(ImageTextLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(titleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(patientTextLabel)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(patientImageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(doctorTextLabel)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(doctorImageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(appointmentTextLabel)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(AppointmentImageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(ImageTextLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ImageImageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(listPatientsButton)
                                .addComponent(addPatientButton))
                            .addComponent(listDoctorsButton)
                            .addComponent(addDoctorButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(deletePatientButton)
                            .addComponent(editPatientButton)
                            .addComponent(editDoctorButton)
                            .addComponent(deleteDoctorButton)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(listAppointmentsButton)
                            .addComponent(addAppointmentButton)
                            .addComponent(listImagesButton)
                            .addComponent(addImageButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(editAppointmentButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(deleteAppointmentButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(dicomServerButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 226, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    /**
     * Callback for the addPatientButton. Creates a popup with the AddPatientWindow & make it visible.
     * @param evt 
     */
    private void addPatientButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addPatientButtonActionPerformed
        AddPatientWindow patientAddPopup = new AddPatientWindow();
        patientAddPopup.setVisible(true);
        
        patientAddPopup.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosed(WindowEvent evt){
                refreshPatientList();
            }
        });
    }//GEN-LAST:event_addPatientButtonActionPerformed
    
    /**
     * Callback for the addDoctorButton.
     * @param evt 
     */
    private void addDoctorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addDoctorButtonActionPerformed
        AddDoctorWindow doctorAddPopup = new AddDoctorWindow();
        doctorAddPopup.setVisible(true);
        
        doctorAddPopup.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosed(WindowEvent evt){
                refreshDoctorList();
            }
        });
    }//GEN-LAST:event_addDoctorButtonActionPerformed
    
    /**
     * Callback for the addAppointmentButton.
     * @param evt 
     */
    private void addAppointmentButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addAppointmentButtonActionPerformed
        AddAppointmentWindow appointmentAddPopup = new AddAppointmentWindow();
        appointmentAddPopup.setVisible(true);
        
        appointmentAddPopup.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosed(WindowEvent evt){
                refreshAppointmentList();
            }
        });
    }//GEN-LAST:event_addAppointmentButtonActionPerformed

    /**
     * Callback for the addImageButton.
     * @param evt 
     */
    private void addImageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addImageButtonActionPerformed
        OpenDICOMDIRWindow imageAddPopup = new OpenDICOMDIRWindow();
        imageAddPopup.setVisible(true);
        
        imageAddPopup.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosed(WindowEvent evt){
                refreshImageList();
            }
        });
    }//GEN-LAST:event_addImageButtonActionPerformed
    
    /**
     * Disable all buttons from the main interface.
     */
    private void disableButtons(){
        editPatientButton.setEnabled(false);
        editDoctorButton.setEnabled(false);
        editAppointmentButton.setEnabled(false);
        
        deletePatientButton.setEnabled(false);
        deleteDoctorButton.setEnabled(false);
        deleteAppointmentButton.setEnabled(false);
    }
    
    /**
     * Load all patients from the database & display in itemsList.
     */
    private void refreshPatientList(){
        List patients = patientCtrl.findPatientEntities();
        EntityListModel<Patient> model = new EntityListModel(patients);
        
        itemsList.setModel(model);
    }
    
    /**
     * Callback for the listPatientsButton. Refresh list & enable related buttons.
     * @param evt 
     */
    private void listPatientsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listPatientsButtonActionPerformed
        refreshPatientList();
        
        disableButtons();
        editPatientButton.setEnabled(true);
        deletePatientButton.setEnabled(true);
        
        itemType = ItemType.PATIENT;
    }//GEN-LAST:event_listPatientsButtonActionPerformed

    /**
     * Load all doctors from the database & display in itemsList
     */
    private void refreshDoctorList(){
        List doctors = doctorCtrl.findDoctorEntities();
        EntityListModel<Doctor> model = new EntityListModel(doctors);
        
        itemsList.setModel(model);
    }
    
    /**
     * Callback for the listDoctorsButton. Refresh list & enable related buttons.
     * @param evt 
     */
    private void listDoctorsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listDoctorsButtonActionPerformed
        refreshDoctorList();
        
        disableButtons();
        editDoctorButton.setEnabled(true);
        deleteDoctorButton.setEnabled(true);

        itemType = ItemType.DOCTOR;
    }//GEN-LAST:event_listDoctorsButtonActionPerformed

    /**
     * Callback for the editPatientButton. Display AddPatientWindow as a popup with the form filled with the selected patient info.
     * @param evt 
     */
    private void editPatientButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editPatientButtonActionPerformed
        // Select Patient from the itemsList
        if( itemsList.getSelectedIndex() < 0 ){
            return;
        }
        EntityListModel<Patient> model = (EntityListModel) itemsList.getModel();
        Patient selected = model.getList().get(itemsList.getSelectedIndex());
        
        // Create AddPatientWindow and set patient info in form.
        AddPatientWindow patientAddPopup = new AddPatientWindow();
        patientAddPopup.setPatient(selected);
        patientAddPopup.setVisible(true);
        
        // Add listener for the "window closed" event to refresh the patient list after the patient has been edited.
        patientAddPopup.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosed(WindowEvent evt){
                refreshPatientList();
            }
        });
    }//GEN-LAST:event_editPatientButtonActionPerformed

    /**
     * Callback for the deletePatientButton. Remove patient from database and refresh patient list.
     * @param evt 
     */
    private void deletePatientButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deletePatientButtonActionPerformed
        // Select Patient from the itemslist
        if( itemsList.getSelectedIndex() < 0 ){
            return;
        }
        EntityListModel<Patient> model = (EntityListModel) itemsList.getModel();
        Patient selected = model.getList().get(itemsList.getSelectedIndex());
        
        // Remove from database
        try {
            patientCtrl.destroy(selected.getIdpatient());
        } catch (IllegalOrphanException | NonexistentEntityException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        refreshPatientList();
    }//GEN-LAST:event_deletePatientButtonActionPerformed

    private void editDoctorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editDoctorButtonActionPerformed
        if( itemsList.getSelectedIndex() < 0 ){
            return;
        }
        EntityListModel<Doctor> model = (EntityListModel) itemsList.getModel();
        Doctor selected = model.getList().get(itemsList.getSelectedIndex());
        
        AddDoctorWindow doctorAddPopup = new AddDoctorWindow();
        doctorAddPopup.setDoctor(selected);
        doctorAddPopup.setVisible(true);
        
        doctorAddPopup.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosed(WindowEvent evt){
                refreshDoctorList();
            }
        });
    }//GEN-LAST:event_editDoctorButtonActionPerformed

    private void deleteDoctorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteDoctorButtonActionPerformed
        if( itemsList.getSelectedIndex() < 0 ){
            return;
        }
        EntityListModel<Doctor> model = (EntityListModel) itemsList.getModel();
        Doctor selected = model.getList().get(itemsList.getSelectedIndex());
        
        try {
            doctorCtrl.destroy(selected.getIddoctor());
        } catch (IllegalOrphanException | NonexistentEntityException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        refreshDoctorList();
    }//GEN-LAST:event_deleteDoctorButtonActionPerformed

    private void refreshAppointmentList() {
        List appointments = appointmentCtrl.findAppointmentEntities();
        EntityListModel<Appointment> model = new EntityListModel(appointments);
        
        itemsList.setModel(model);
    }
    
    private void listAppointmentsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listAppointmentsButtonActionPerformed
        refreshAppointmentList();
        
        disableButtons();
        editAppointmentButton.setEnabled(true);
        deleteAppointmentButton.setEnabled(true);
        
        itemType = ItemType.APPOINTMENT;
    }//GEN-LAST:event_listAppointmentsButtonActionPerformed

    private void editAppointmentButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editAppointmentButtonActionPerformed
        if( itemsList.getSelectedIndex() < 0 ){
            return;
        }
        EntityListModel<Appointment> model = (EntityListModel) itemsList.getModel();
        Appointment selected = model.getList().get(itemsList.getSelectedIndex());
        
        AddAppointmentWindow appointmentAddPopup = new AddAppointmentWindow();
        appointmentAddPopup.setAppointment(selected);
        appointmentAddPopup.setVisible(true);
        
        appointmentAddPopup.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosed(WindowEvent evt){
                refreshAppointmentList();
            }
        });
    }//GEN-LAST:event_editAppointmentButtonActionPerformed

    private void deleteAppointmentButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteAppointmentButtonActionPerformed
        if( itemsList.getSelectedIndex() < 0 ){
            return;
        }
        EntityListModel<Appointment> model = (EntityListModel) itemsList.getModel();
        Appointment selected = model.getList().get(itemsList.getSelectedIndex());
        
        try {
            appointmentCtrl.destroy(selected.getIdappointment());
        } catch (NonexistentEntityException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        refreshAppointmentList();
    }//GEN-LAST:event_deleteAppointmentButtonActionPerformed

    private void refreshImageList() {
        List images = imageCtrl.findImageEntities();
        EntityListModel<Image> model = new EntityListModel(images);
        
        itemsList.setModel(model);
    }
    
    private void listImagesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listImagesButtonActionPerformed
        refreshImageList();
        
        disableButtons();
        //editImageButton.setEnabled(true);
        //deleteImageButton.setEnabled(true);
        
        itemType = ItemType.IMAGE;
    }//GEN-LAST:event_listImagesButtonActionPerformed

    private void itemsListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_itemsListMouseClicked
        // Only react on double-click in the list of images
        if( itemType == ItemType.IMAGE && evt.getClickCount() == 2 && itemsList.getSelectedIndex() >= 0 ){
            EntityListModel<Image> model = (EntityListModel) itemsList.getModel();
            Image selected = model.getList().get(itemsList.getSelectedIndex());

            // Check if file already on disk:
            String localpacspath = GlobalConfig.LOCAL_DICOM_REPOSITORY;
            File f = new File(localpacspath, selected.getInstanceuid());
            
            if( f.exists() && !f.isDirectory() ){
                System.out.println("File already on disk, no C-MOVE required");
            }
            else {
                if( !dicomServices.isListening() ){
                    System.out.println("Cannot receive DICOM files. Server is not running.");
                    return;
                }
                
                dicomServices.doCMove(selected.getStudyuid());
                
                if( f.exists() && !f.isDirectory() ){
                    System.out.println("File downloaded and available");
                }
                else{
                    System.out.println("File unavailable.");
                }
            }
                    
            DICOMViewerWindow dicomViewerPopup = new DICOMViewerWindow();
            dicomViewerPopup.viewDICOM(f);
            dicomViewerPopup.setVisible(true);
        }
    }//GEN-LAST:event_itemsListMouseClicked

    private void dicomServerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dicomServerButtonActionPerformed
        if( !dicomServices.isListening() ){
            dicomServices.start();
            dicomServerButton.setBackground(Color.green);
            dicomServerButton.setText("Server (running)");
        }
        else {
            dicomServices.stop();
            dicomServerButton.setBackground(Color.red);
            dicomServerButton.setText("Server (stopped)");            
        }
    }//GEN-LAST:event_dicomServerButtonActionPerformed
       
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel AppointmentImageLabel;
    private javax.swing.JLabel ImageImageLabel;
    private javax.swing.JLabel ImageTextLabel;
    private javax.swing.JButton addAppointmentButton;
    private javax.swing.JButton addDoctorButton;
    private javax.swing.JButton addImageButton;
    private javax.swing.JButton addPatientButton;
    private javax.swing.JLabel appointmentTextLabel;
    private javax.swing.JButton deleteAppointmentButton;
    private javax.swing.JButton deleteDoctorButton;
    private javax.swing.JButton deletePatientButton;
    private javax.swing.JButton dicomServerButton;
    private javax.swing.JLabel doctorImageLabel;
    private javax.swing.JLabel doctorImageLabel1;
    private javax.swing.JLabel doctorTextLabel;
    private javax.swing.JLabel doctorTextLabel1;
    private javax.swing.JButton editAppointmentButton;
    private javax.swing.JButton editDoctorButton;
    private javax.swing.JButton editPatientButton;
    private javax.swing.JList<String> itemsList;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton listAppointmentsButton;
    private javax.swing.JButton listDoctorsButton;
    private javax.swing.JButton listImagesButton;
    private javax.swing.JButton listPatientsButton;
    private javax.swing.JLabel patientImageLabel;
    private javax.swing.JLabel patientTextLabel;
    private javax.swing.JLabel titleLabel;
    // End of variables declaration//GEN-END:variables
}
